{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","autoFocus","src","alt","class","faTrash","faPencilAlt","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","nweets","setNweets","useEffect","onSnapshot","snapshot","nweetArray","docs","map","marginTop","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","Profile","from","App","init","setInit","setUserObj","onAuthStateChanged","user","args","Boolean","currentUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40493eb9.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\n//auth서비스를 많이 호출하려고\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();\r\n","import React, { useState } from \"react\";\r\nimport {authService} from \"fbase\";\r\n\r\n// const inputStyles = {};\r\n\r\nconst AuthForm = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const onChange = (event) =>{\r\n        // console.log(event.target.name);\r\n        const{\r\n            target: {name, value},\r\n        } = event;\r\n        // console.log(value);\r\n        if (name === \"email\"){\r\n            setEmail(value);\r\n        }else if(name ===\"password\"){\r\n            setPassword(value);\r\n        }\r\n    };\r\n\r\n    const onSubmit = async (event) =>{\r\n        event.preventDefault();\r\n        //제출 눌렀을때 사이트 자체를 새로고침하지 않으려고\r\n        try {\r\n            let data;\r\n            \r\n            if (newAccount){\r\n                //create account\r\n               data = await authService.createUserWithEmailAndPassword(\r\n                    email, password\r\n                );\r\n            } else {\r\n                //log in\r\n               data = await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n            console.log(data);\r\n        } catch(error) {\r\n            setError(error.message);\r\n        }\r\n    };\r\n    const toggleAccount = () => setNewAccount(prev => !prev);\r\n    //반대값으로 바꿔준다\r\n    return (\r\n        <>\r\n        <form onSubmit={onSubmit} className=\"container\">\r\n            <input \r\n                name=\"email\" \r\n                type=\"email\" \r\n                placeholder=\"Email\" \r\n                required value={email} \r\n                onChange={onChange}\r\n                className=\"authInput\"\r\n            />\r\n            <input \r\n                name=\"password\" \r\n                type=\"password\" \r\n                placeholder=\"password\" \r\n                required value={password}\r\n                onChange={onChange}\r\n                className=\"authInput\"\r\n            />\r\n            <input \r\n                type=\"submit\" \r\n                className=\"authInput authSubmit\"\r\n                value={newAccount ? \"Create Account\" : \"Log In\"}/>\r\n             {error && <span className=\"authError\">{error}</span>}\r\n        </form>\r\n        <span onClick={toggleAccount} className=\"authSwitch\">\r\n            {newAccount ? \"Sign In\" : \"Create Account\"}\r\n        </span>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AuthForm;","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport {authService, firebaseInstance} from \"fbase\";\r\nimport AuthForm from \"../components/AuthForm\";\r\n\r\nconst Auth = () => {\r\n    \r\n    const onSocialClick = async (event) => {\r\n        // console.log(event.target.name);\r\n        const {\r\n            target: {name},\r\n        } = event;\r\n        let provider;\r\n        if(name === \"google\"){\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        }else if(name === \"github\"){\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        const data = await authService.signInWithPopup(provider);\r\n        console.log(data);\r\n    };\r\n    return (\r\n    <div className=\"authContainer\">\r\n        <FontAwesomeIcon\r\n          icon={faTwitter}\r\n          color={\"#04AAFF\"}\r\n          size=\"3x\"\r\n          style={{ marginBottom: 30 }}\r\n        />    \r\n        <AuthForm />\r\n        <div className=\"authBtns\">\r\n            <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n                Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n            </button>\r\n            <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n                Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n            </button>\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\n export default Auth;","import { dbService, storageService } from 'fbase';\r\nimport React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Nweet = ({ nweetObj , isOwner }) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const [newNweet, setNewNweet] = useState(nweetObj.text);\r\n    const onDeleteClick = async() => {\r\n        const ok = window.confirm(\"Are you sure?\");\r\n        if(ok){\r\n            await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n            //delete nweet\r\n            await storageService.refFromURL(nweetObj.attachmentUrl).delete();\r\n            //refFromURL함수를 이용하면 URL에서 reference를 얻을수있다.\r\n            //firebase에 refFromURL함수에 url을 넘기면 그object의 reference를 얻는다. \r\n            //이 작업으로 nweet와 사진을 가진 reference 자체를 삭제해준다.\r\n        }\r\n    };\r\n    const  toggleEditing = () => setEditing((prev) => !prev);\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        // console.log(nweetObj, newNweet);\r\n        await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n            text:newNweet,\r\n            //newNweet는 input에 있는 text이다.\r\n        });\r\n        setEditing(false);\r\n    };\r\n    const onChange = (event) =>{\r\n        const {\r\n            target:{ value },\r\n        }=event;\r\n        setNewNweet(value);\r\n    };\r\n    return(\r\n    <div className=\"nweet\">\r\n        {editing ? (\r\n            //수정하고있는 경우에\r\n            <>\r\n             <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n                <input \r\n                    type=\"text\" \r\n                    placeholder=\"Edit nweet\" \r\n                    value={newNweet} \r\n                    required \r\n                    onChange={onChange}\r\n                    autoFocus\r\n                    className=\"formInput\"\r\n                    />\r\n                 <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\" />\r\n            </form> \r\n            <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n                Cancel\r\n            </span>\r\n            </>\r\n         ) : (\r\n            <>\r\n            <h4>{nweetObj.text}</h4>\r\n           \r\n            {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl}  alt=\"\" />}\r\n            {isOwner && (\r\n            \r\n              <div class=\"nweet__actions\">\r\n                   <span onClick={onDeleteClick}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </span>\r\n              <span onClick={toggleEditing}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n              </span>\r\n            </div>\r\n            )};\r\n            </>\r\n            )};\r\n        </div>\r\n        );\r\n    };\r\nexport default Nweet;\r\n","import React, {useState} from \"react\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nconst NweetFactory = ({userObj}) =>{\r\n    const [nweet, setNweet] = useState(\"\");\r\n    const [attachment, setAttachment] = useState(\"\"); \r\n    //위에 state들은 form을 위한 state들이다.\r\n    //collection을 get하는 state\r\n    const onSubmit = async (event) => {\r\n      if (nweet === \"\") {\r\n        return;\r\n      }\r\n        //collection.add가 promise를 리턴하므로 async 추가\r\n      event.preventDefault();\r\n      let attachmentUrl = \"\";\r\n      if(attachment !== \"\"){\r\n        //attachment인 사진이 있다면 비어있는 string을 storage에서 다운받은 URL로 업데이트한다.\r\n        const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n        //data_url은 format 부분이고, readAsDataURL()와 유사하다.\r\n        //attachment의 string은 이미지 전체이다.\r\n        //우린 이미 파일에대한 엄청 긴 URL을 가지고 있어서 putString을 사용한다.\r\n        //child에는 기본적으로 이미지path가 들어간다. (collection과 비슷하다)\r\n        //ref에서 폴더를 만들수있고 child는 이미지 path가 들어간다.\r\n        const response = await attachmentRef.putString(attachment , \"data_url\");\r\n        //사진에대한 nweet을 할수있도록\r\n        attachmentUrl = await response.ref.getDownloadURL();\r\n      }\r\n      const nweetObj = {\r\n          text: nweet,\r\n          //nweet:nweet 키와 컬렉션인데 그냥 저렇게 표현.\r\n          //nweet는 state인 nweet의 value이다.\r\n          createdAt: Date.now(),\r\n          creatorId: userObj.uid,\r\n          //nweet이 creatorId이다\r\n          attachmentUrl,\r\n          //collection에 사진의 Url이 들어간다.\r\n      };\r\n     \r\n      await dbService.collection(\"nweets\").add(nweetObj);\r\n       //어떤(\"nweets\") collection에 너의 data들을 저장할지 지정하는곳\r\n      //firestore에서 가져오는 dbservice를 이용하여\r\n      //collection을 생성한다.\r\n      setNweet(\"\");\r\n      setAttachment(\"\");\r\n       //submit버튼을 누르면 nweet 컬렉션이 생성되고\r\n      //빈 문자열로 초기화해준다.\r\n    };\r\n    const onChange = (event) => {\r\n      const {\r\n        target: { value },\r\n      } = event;\r\n      setNweet(value);\r\n    };\r\n    const onFileChange = (event) =>{\r\n      const {\r\n        target: {files},\r\n      } =event;\r\n      //event안에서 target안으로 가서 파일을 받아옴.\r\n      //event.target.files이다.\r\n      const theFile = files[0];\r\n      //input 파일들중 첫번쨰 파일 하나만 받았다.\r\n      const reader = new FileReader();\r\n      //files를 가지고 reader를 만든다음\r\n      reader.onloadend =(finishedEvent) => {\r\n        //FileReader의 API를 이용하여 파일을 읽은다음 finishedEvent를 받는다\r\n       const{\r\n         currentTarget: {result},\r\n       } = finishedEvent;\r\n        setAttachment(result);\r\n        //onloaded에 finishedEvent의 result를 setAttachment로 설정\r\n      }\r\n      //eventLister를 file reader에 추가한다\r\n      reader.readAsDataURL(theFile);\r\n      //readAsDataURL를 사용해서 파일을 읽는다.\r\n    };\r\n    const onClearAttachment = () => setAttachment(\"\")  \r\n\r\n    return(\r\n      <>\r\n        <form onSubmit={onSubmit} className=\"factoryForm\">\r\n          <div className=\"factoryInput__container\">\r\n            <input\r\n              className=\"factoryInput__input\"\r\n              value={nweet}\r\n              onChange={onChange}\r\n              type=\"text\"\r\n              placeholder=\"What's on your mind?\"\r\n              maxLength={120}\r\n            />\r\n            <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n          </div>\r\n          <label for=\"attach-file\" className=\"factoryInput__label\">\r\n            <span>Add photos</span>\r\n            <FontAwesomeIcon icon={faPlus} />\r\n          </label>\r\n          <input\r\n                 id=\"attach-file\"\r\n                 type=\"file\"\r\n                 accept=\"image/*\"\r\n                 onChange={onFileChange}\r\n                 style={{\r\n                   opacity: 0,\r\n                 }}\r\n               />\r\n         \r\n            {attachment && (\r\n            <div className=\"factoryForm__attachment\">\r\n            <img\r\n              src={attachment} alt=\"\"\r\n              style={{\r\n                backgroundImage: attachment,\r\n              }}\r\n            />\r\n              <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n                <span>Remove</span>\r\n                <FontAwesomeIcon icon={faTimes} />\r\n              </div>\r\n            </div>\r\n          )}\r\n      </form>\r\n      </>\r\n    );\r\n  };\r\n  export default NweetFactory;","import React, { useState, useEffect } from \"react\";\r\nimport { dbService } from \"fbase\";\r\nimport Nweet from \"../components/Nweet.js\";\r\nimport NweetFactory from \"../components/NweetFactory.js\";\r\n\r\n\r\nconst Home = ({ userObj }) => {\r\n  \r\n  const [nweets, setNweets] = useState([]);\r\n  //위에 state들은 form을 위한 state들이다.\r\n  //collection을 get하는 state\r\n \r\n  useEffect(() => {\r\n   \r\n    dbService.collection(\"nweets\").onSnapshot((snapshot) => {\r\n      //새로운 스냅샷을 만들떄 배열을 만들어 다음 state에 집어넣는다.\r\n         //query 대신 snapshot을 이용하면 실시간으로 update를 확인할수있음.\r\n      const nweetArray = snapshot.docs.map((doc) => ({\r\n        //모든 배열 아이템들의 구조는 밑에와 같이 id, data를 받는다.\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setNweets(nweetArray);\r\n    });\r\n  }, []);\r\n  return (\r\n    <div className=\"container\">\r\n      <NweetFactory userObj={userObj}/>\r\n      <div style={{ marginTop: 30 }}>\r\n        {nweets.map((nweet) => (\r\n          <Nweet \r\n            key={nweet.id} \r\n            nweetObj={nweet}\r\n            //nweet의 모든데이터 author text creatAt\r\n            isOwner={nweet.creatorId === userObj.uid}\r\n            //nweet당사자creatorId와 uid가 같으면 true 아니면 false\r\n            //userObj는 prop으로 router와 어플리케이션(app)에서 받아온다\r\n            //그리고 어플리케이션에서는 onAuthchanged state를 핸들링한다.\r\n            />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;","import React, { useState } from \"react\";\r\nimport { authService } from \"fbase\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default ({ refreshUser, userObj }) => {\r\n\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    const onLogOutClick = () => {\r\n      authService.signOut();\r\n      history.push(\"/\");\r\n      //route.js에서 redirect를 이용할수있고\r\n        //history location을 사용하여 로그아웃되면 home으로\r\n        //이동할수있다.\r\n    };\r\n    const onChange = (event) => {\r\n      const {\r\n        target: { value },\r\n      } = event;\r\n      setNewDisplayName(value);\r\n    };\r\n    const onSubmit = async (event) => {\r\n      event.preventDefault();\r\n      if (userObj.displayName !== newDisplayName) {\r\n        await userObj.updateProfile({\r\n          displayName: newDisplayName,\r\n        });\r\n        refreshUser();\r\n      }\r\n    };\r\n\r\n  return (\r\n    \r\n    <div className=\"container\">\r\n      <form onSubmit={onSubmit} className=\"profileForm\">\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          autoFocus\r\n          placeholder=\"Display name\"\r\n          value={newDisplayName}\r\n          className=\"formInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Update Profile\"\r\n          className=\"formBtn\"\r\n          style={{\r\n            marginTop: 10,\r\n          }}\r\n        />\r\n     \r\n      </form>\r\n     \r\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n        Log Out\r\n      </span>\r\n    </div>\r\n  );\r\n};","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nconst Navigation = ({userObj}) => \r\n<nav>\r\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n        <li>\r\n            <Link to=\"/\" style={{ marginRight: 10 }}>\r\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n            </Link>\r\n        </li>\r\n        <li>\r\n            <Link\r\n            to=\"/profile\"\r\n            style={{\r\n                marginLeft: 10,\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\",\r\n                fontSize: 12,\r\n            }}\r\n            >\r\n            <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n            <span style={{ marginTop: 10 }}>\r\n                {userObj.displayName\r\n                ? `${userObj.displayName}의 Profile`\r\n                : \"Profile\"}\r\n            </span>\r\n            </Link>\r\n        </li>\r\n    </ul>\r\n</nav>;\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Profile from \"routes/Profile\";\r\nimport Navigation from \"components/Navigation\";\r\n\r\nconst AppRouter = ({refreshUser ,isLoggedIn, userObj}) => {\r\n    //prop한 state를 받아서 사용한다.\r\n    \r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Navigation userObj={userObj}/>}\r\n            <Switch>\r\n                {isLoggedIn ? (\r\n                   <div\r\n                    style={{\r\n                        maxWidth: 890,\r\n                        width: \"100%\",\r\n                        margin: \"0 auto\",\r\n                        marginTop: 80,\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                 >\r\n                    <Route exact path=\"/\">\r\n                        <Home userObj={userObj}/>\r\n                    </Route> \r\n                    <Route exact path=\"/profile\">\r\n                        <Profile \r\n                            userObj={userObj}\r\n                            refreshUser ={refreshUser}/>\r\n                    </Route>\r\n                    <Redirect from=\"*\" to=\"/\" />\r\n                </div>\r\n                ) : (\r\n                <>\r\n                    <Route exact path=\"/\">\r\n                        <Auth/>\r\n                    </Route>\r\n                    <Redirect from=\"*\" to=\"/\" />\r\n                </>\r\n                )}\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default AppRouter;","import React, { useState, useEffect } from 'react';\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {  \n  const [init, setInit] = useState(false);\n  //init이 false면 router를 숨긴다  \n  // const [isLoggedIn, setIsLoggedIn] = useState(authService.currentUser);\n  //user를 불러와 authentication을 지정해준다.\n  const [userObj, setUserObj] = useState(null);\n  //트위팅하는 user가 누군지 알수있는 state\n  \n  useEffect(() =>{\n    authService.onAuthStateChanged((user) =>{\n      //로그인 되면 이것이 호출되면서 로그인한 유저를 받는다.\n      //setUser로 받고 필요할 때 사용한다.\n      if(user){\n      // setUserObj(user);\n        //user를 얻어야 로그인이 된다.\n        //authService가 바뀌면 받을 user에 setUser를 넣는다\n      setUserObj({\n        displayName: user.displayName,\n        uid: user.uid,\n        updateProfile: (args) => user.updateProfile(args),\n\n        });\n      } else{\n        setUserObj(null);\n      }\n      setInit(true);\n      //우린 항상 true로 한다 \n      //왜냐하면 초기화가 되던 어플리케이션이 언제 시작되든? onAuthStateChanged 시작되어야한다.\n    });\n  }, []);\n    const refreshUser = () =>{\n      const user = authService.currentUser;\n      setUserObj({\n        displayName: user.displayName,\n        uid: user.uid,\n        updateProfile: (args) => user.updateProfile(args),\n\n      });\n    } ;\n\n  return ( \n    <>\n      {init ? (<AppRouter \n        isLoggedIn={Boolean(userObj)} \n        userObj={userObj}\n        refreshUser={refreshUser}/>\n      //기본적으로 userObj가 존재할때 로그인 되고 없다면 로그인 안된다.\n      //state를 router.js로 prop해준다.\n       ) : \"Initializing..\"}\n    </>\n );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./styles.css\";\n// import firebase from \"./firebase.js\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}